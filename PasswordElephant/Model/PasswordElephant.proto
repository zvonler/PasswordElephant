syntax = "proto3";

package PasswordElephant;

message Archive {
    // An Archive is the outer-most representation of the data stored by PasswordElephant
    // and is the only object written to the database file.

    string magic = 1;         // A short string used to recognize PasswordElephant files
    int32 version = 2;        // The version of PasswordElephant that wrote this archive
    int32 count = 3;          // The number of iterations to perform the stretch function
    bytes salt = 4;           // The bytes used as salt when stretching the passphrase
    bytes passHash = 5;       // The digest bytes of the stretched passphrase
    bytes innerKeyCipher = 6; // The ciphertext bytes of the key used to encrypt the database entries
    bytes outerKeyCipher = 7; // The ciphertext bytes of the initializer used for the HMAC
    bytes iv = 8;             // The initial vector for the database cipher
    bytes cipherText = 9;     // The ciphertext bytes of the database
    bytes hmac = 10;          // The bytes of the HMAC
}

message Database {
    // A Database contains a list of Entry objects.

    repeated Entry entries = 1;
}

message Entry {
    // An Entry has Feature objects that contain the actual content.

    repeated Feature features = 2;
}

message Feature {
    // A Feature is the smallest unit of information stored by Password Elephant.

    enum Category {
        RAW = 0;
        GROUP = 1;
        TITLE = 2;
        USERNAME = 3;
        PASSWORD = 4;
        NOTES = 5;
        URL = 6;
        CREATED = 7;
        MODIFIED = 8;
        PASSWORD_MODIFIED = 9;
        PASSWORD_LIFETIME = 10;
        PASSWORD_POLICY = 11;
        UUID = 12;

        UNKNOWN = 100;
    }
    Category category = 1;

    bytes content = 2;
}


